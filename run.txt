

    ERROR: Command errored out with exit status 1:
     command: /home/ubuntu/.virtualenvs/foo/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-6v7cxo16/psycopg2/setup.py'"'"'; __file__='"'"'/tmp/pip-install-6v7cxo16/psycopg2/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' egg_info --egg-base /tmp/pip-install-6v7cxo16/psycopg2/pip-egg-info
         cwd: /tmp/pip-install-6v7cxo16/psycopg2/
    Complete output (23 lines):
    running egg_info
    creating /tmp/pip-install-6v7cxo16/psycopg2/pip-egg-info/psycopg2.egg-info
    writing /tmp/pip-install-6v7cxo16/psycopg2/pip-egg-info/psycopg2.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-install-6v7cxo16/psycopg2/pip-egg-info/psycopg2.egg-info/dependency_links.txt
    writing top-level names to /tmp/pip-install-6v7cxo16/psycopg2/pip-egg-info/psycopg2.egg-info/top_level.txt
    writing manifest file '/tmp/pip-install-6v7cxo16/psycopg2/pip-egg-info/psycopg2.egg-info/SOURCES.txt'
    
    Error: pg_config executable not found.
    
    pg_config is required to build psycopg2 from source.  Please add the directory
    containing pg_config to the $PATH or specify the full executable path with the
    option:
    
        python setup.py build_ext --pg-config /path/to/pg_config build ...
    
    or with the pg_config option in 'setup.cfg'.
    
    If you prefer to avoid building psycopg2 from source, please install the PyPI
    'psycopg2-binary' package instead.
    
    For further information please check the 'doc/src/install.rst' file (also at
    <http://initd.org/psycopg/docs/install.html>).
    
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.


summary of deployment. Deploying Django Projects to Heroku/AWS S3
Your App
   1. requirements.txt
   2. Procfile
   3. DB Connection
   4. S3 Connection
   5. Environment Variables
   6. Github
Heroku
   1. Database
   2. Config Vars (Environment Variables)
   3. Deploy (Github)
AWS
   1. S3 Buckets
   2. IAM (Security)
        
------------------------------------------------------------------------
We can use either MySQL or Postgres DB on Heroku.
We'll use Postgres for this example.
1. Create a Heroku Personal Project
   1.a Optionally enter a project name.
       Must be unique accross heroku.
       Perhaps prefix with name or website
       e.g. niels-ecommerce
   1.b Choose 'Europe' as Runtime Selection
   1.c Select 'Resources' and under 'Add-ons' enter
       postgres, and select Heroku Postgres.
       Provision a hobby (free) database.
   1.d Click on Settings, Reveal Config Vars and note
       that there is now a DATABASE_URL setting.
2. Modify App to Connect to Heroku DB instead of local
   2.a sudo pip3 install dj-database-url
   2.b sudo pip3 install psycopg2
   2.c sudo pip3 freeze --local > requirements.txt
   2.d In settings.py import dj_database_url
   2.e Change the existing DB connection in settings.py
       to use a URL
       Comment out the following
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.sqlite3',
           'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
       }
    }
   Replace with this.
    DATABASES = {'default': dj_database_url.parse(os.environ.get('DATABASE_URL')) }
  2.h Create a file called env.py in the project folder.
      (Same folder as settings.py)
      Add the DATABASE_URL and SECRET_KEY variables
      as follows.
   import os
   os.environ.setdefault("SECRET_KEY", "<KEY HERE>")
   os.environ.setdefault("DATABASE_URL", "<DB URL HERE>")
  2.i python3 manage.py makemigrations
      python3 manage.py migrate
  2.j python3 manage.py createsuperuser
3. Get Project Ready to run on Heroku
   3.a Create Procfile(s)
           One file called Procfile (Upper case P, no file extension)
           web: gunicorn projectfolder.wsgi:application
           projectfolder above is the name of the project file that we want to run,
           it will be different for your project.
   3.b sudo pip3 install gunicorn`
   3.c pip3 freeze --local > requirements.txt
1:05 PM
3 d. Add your key-value pairs for all the environment variables to the config var in settings in the Heroku app dashboard. DATABASE_URL, SECRET_KEY and any others you have used such as Stripe or AWS keys.




all commands
******************************
______________________________

wget -q https://git.io/v77xs -O /tmp/setup-workspace.sh && source /tmp/setup-workspace.sh
mkvirtualenv foo 
sudo pip3 install django==1.11 
pip freeze > requirements.txt
django admin startproject blog-web-app
django admin startproject blog-web-app . 
django-admin startproject blog-web-app . 
django-admin startproject blogWebApp . 
ls
pwd
whoami
python3 manage.py 
 chmod +x manage.py 
./manage.py migrate
./manage.py migrate.py runserver $IP:PORT
./manage.py migrate.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
echo -e "*.sqlite3\n*.pyc\n.~c9\n_pycache_/" > .gitignore
git ad *
git commit -m "blogApp"
git remote add origin https://github.com/MACmidiDEV/blogDjango.git
 . 
. 
git remote add origin https://github.com/MACmidiDEV/blogDjango.git
git push origin master
git status
git init
git status
git add *
git add status
status
git status
git commin -m "init"
git commit -m "init"
git remote add origin https://github.com/MACmidiDEV/blogDjango.git
git commit -m "init"
git push origin master
git add *
git status
git commit -m "securtyFix"
git push origin master
history
echo history > run.txt
git status
git add *
git commit -m "travicCI"
git push origin master
git push origin master
./manage.py startapp posts
 pip install pillow
./manage.py migrate
./manage.py migrate
./manage.py migrate
git add *
git commit -m "travicCI"
git push origin master
git push origin master
git push origin master
./manage.py migrate
manage.py makemigrations
manage.py make migrations
manage.py makemigrations
rerun
re run
manage.py make migrations
./manage.py migrate
nigrate
migrate
migrate
./manage.py migrate
manage.py make migrations
./manage.py makemigrations
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
./manage.py runserver $IP:$PORT
work on foo
workon foo
pip  install django-forms-bootstrap


******************************


  1  wget -q https://git.io/v77xs -O /tmp/setup-workspace.sh && source /tmp/setup-workspace.sh
    2  mkvirtualenv foo 
    3  sudo pip3 install django==1.11 
    4  pip freeze > requirements.txt
    5  django admin startproject blog-web-app
    6  django admin startproject blog-web-app . 
    7  django-admin startproject blog-web-app . 
    8  django-admin startproject blogWebApp . 
    9  ls
   10  pwd
   11  whoami
   12  python3 manage.py 
   13   chmod +x manage.py 
   14  ./manage.py migrate
   15  ./manage.py migrate.py runserver $IP:PORT
   16  ./manage.py migrate.py runserver $IP:$PORT
   17  ./manage.py runserver $IP:$PORT
   18  echo -e "*.sqlite3\n*.pyc\n.~c9\n_pycache_/" > .gitignore
   19  git ad *
   20  git commit -m "blogApp"
   21  git remote add origin https://github.com/MACmidiDEV/blogDjango.git
   22   . 
   23  . 
   24  git remote add origin https://github.com/MACmidiDEV/blogDjango.git
   25  git push origin master
   26  git status
   27  git init
   28  git status
   29  git add *
   30  git add status
   31  status
   32  git status
   33  git commin -m "init"
   34  git commit -m "init"
   35  git remote add origin https://github.com/MACmidiDEV/blogDjango.git
   36  git commit -m "init"
   37  git push origin master
   38  git add *
   39  git status
   40  git commit -m "securtyFix"
   41  git push origin master
   42  history

$ django-admin startproject blogWebApp 

Django~=1.11.19
pytz~=2018.7

Django~=1.11
pytz~=2018.7


CommandError: 'blog-web-app' is not a valid project name. Please make sure the name is a valid identifier.



arrow==0.15.4
asn1crypto==0.24.0
astroid==1.6.6
aws-lambda-builders==0.4.0
aws-sam-cli==0.21.0
aws-sam-translator==1.11.0
backports.functools-lru-cache==1.6.1
backports.ssl-match-hostname==3.7.0.1
binaryornot==0.4.4
boto3==1.10.22
botocore==1.13.22
certifi==2019.9.11
chardet==3.0.4
chevron==0.13.1
Click==7.0
CodeIntel==0.9.3
configparser==4.0.2
cookiecutter==1.6.0
cryptography==2.1.4
dateparser==0.7.2
Django==1.11.10
docker==4.1.0
docutils==0.15.2
enum34==1.1.6
Flask==1.0.4
functools32==3.2.3.post2
future==0.18.2
futures==3.3.0
idna==2.6
ikpdb==1.2.3
Inflector==2.0.12
ipaddress==1.0.17
isort==4.3.21
itsdangerous==1.1.0
jedi==0.11.1
Jinja2==2.10.3
jinja2-time==0.2.0
jmespath==0.9.4
jsonschema==2.6.0
keyring==10.6.0
keyrings.alt==3.0
lazy-object-proxy==1.4.3
MarkupSafe==1.1.1
mccabe==0.6.1
parso==0.1.1
pathlib2==2.3.5
pbr==5.4.3
poyo==0.5.0
pycrypto==2.6.1
pygobject==3.26.1
pylint==1.9.5
pylint-django==0.8.0
pylint-flask==0.5
pylint-plugin-utils==0.6
python-dateutil==2.8.1
pytz==2019.3
pyxdg==0.25
PyYAML==5.1.2
regex==2019.11.1
requests==2.22.0
s3transfer==0.2.1
scandir==1.10.0
SecretStorage==2.3.1
serverlessrepo==0.1.9
singledispatch==3.4.0.3
six==1.13.0
stevedore==1.31.0
subprocess32==3.5.4
tzlocal==2.0.0
urllib3==1.25.7
virtualenv==16.2.0
virtualenv-clone==0.5.3
virtualenvwrapper==4.8.4
websocket-client==0.56.0
Werkzeug==0.16.0
whichcraft==0.6.1
wrapt==1.11.2
zope.cachedescriptors==4.3.1
